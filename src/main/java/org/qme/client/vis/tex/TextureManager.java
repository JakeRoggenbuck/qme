package org.qme.client.vis.tex;

import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GL32;
import org.qme.io.Logger;
import org.qme.io.Severity;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.ArrayList;

/**
 * Class responsible for loading textures from files
 * @author cameron
 * @since PreB
 */
public class TextureManager {

    /**
     * Path to the texture locations
     */
    private static final String TEXTURE_RESOURCES = "resources/textures/";

    /**
     * List of every loaded texture
     */
    public static ArrayList<Integer> textures = new ArrayList<>();

    /**
     * Loads textures
     */
    public TextureManager() {
        ArrayList<String> toLoad = new ArrayList<>();
        toLoad.add("missing.png");
        toLoad.add("forest.png");
        toLoad.add("plains.png");
        toLoad.add("fertile-plains.png");
        toLoad.add("mountain.png");
        toLoad.add("ocean.png");
        toLoad.add("sea.png");
        toLoad.add("high-mountain.png");
        toLoad.add("desert.png");
        loadTextures(toLoad);
    }

    /**
     * Loads an array of textures by the file name
     * @param toLoad a list of file names to load
     */
    public static void loadTextures(ArrayList<String> toLoad) {
        for (String texture : toLoad) {
            textures.add(loadTextureFromImage(loadImage(TEXTURE_RESOURCES + texture)));
        }
    }

    /**
     * Loads a opengl texture from an image
     * @param image Image file to load
     * @return Id of the loaded texture
     */
    public static int loadTextureFromImage(BufferedImage image) {

        GL32.glEnable(GL32.GL_TEXTURE_2D);

        int[] pixelBuf = new int[image.getWidth() * image.getHeight()];
        image.getRGB(0, 0, image.getWidth(), image.getHeight(), pixelBuf, 0, image.getWidth());
        ByteBuffer buf = BufferUtils.createByteBuffer(image.getWidth() * image.getHeight() * 4);

        for (int y = 0; y < image.getHeight(); y++) {
            for (int x = 0; x < image.getWidth(); x++) {

                int pixel = pixelBuf[y * image.getWidth() + x];

                // Get RGB
                buf.put((byte) ((pixel >> 16) & 0xFF));
                buf.put((byte) ((pixel >> 8) & 0xFF));
                buf.put((byte) (pixel & 0xFF));

                // Get alpha
                buf.put((byte) ((pixel >> 24) & 0xFF));

            }
        }

        buf.flip();

        // The id generated by GL
        int id = GL32.glGenTextures();

        GL32.glBindTexture(GL32.GL_TEXTURE_2D, id);

        GL32.glTexImage2D(
                GL32.GL_TEXTURE_2D, 0, GL32.GL_RGBA,
                image.getWidth(), image.getHeight(),
                0, GL32.GL_RGBA, GL32.GL_UNSIGNED_BYTE, buf
        );

        GL32.glActiveTexture(GL32.GL_TEXTURE0);

        GL32.glGenerateMipmap(GL32.GL_TEXTURE_2D);

        return id;

    }

    /**
     * Gets an image from the file system
     * @param path path of the file
     * @return an image
     */
    public static BufferedImage loadImage(String path) {
        try {
            return ImageIO.read(new File(path));
        } catch (IOException e) {
            Logger.log("Could not find texture " + path, Severity.WARNING);
            e.printStackTrace();
            try {
                Logger.log("Could not find fallback texture", Severity.ERROR);
                return ImageIO.read(new File("resources/textures/missing.png"));
            } catch (IOException ex) {
                ex.printStackTrace();
            }
        }
        return null;
    }

}
